Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.
1. Spoofing
   spoofing as an legitimate user
2. Tampering: 
   modification of the dockerfile when an attacker get illegal access to docker clinet.
3. Repudiation:
   malicious docker image commited by an attacker which denied by the attacker.
4. Information Disclosure:
   an attacker leak sensitive or private user data due to improper docker configuration.
5. Elevation of Privilege:
   elevation priviledge by using flag --privilege. this allow attacker to access docker host.

Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.
1. Spoofing
   attacker may spoof to API server as legitimate calls.
2. Tampering
   if left unsecure, kubelet configuration can be tamper by attacker.
3. Repudiation
   attacker may change configuration to the API server.
4. Information Disclosure
   attacker may gain illegal access to sensitive information via kube-proxy
5. Elevation of Privilege
   --privilege flag can be misuse.

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).

1. error 3.4
   Description:
     You should verify that the file permissions on the docker.socket file are
     correctly set to 644 or more restrictively.
   Rationale:
     The docker.socket file contains sensitive parameters that may alter the 
     behavior of the Docker remote API. It should therefore be writeable only 
     by root in order to ensure that it is not modified by less privileged 
     users.

2. error 3.8
   Description:
     You should verify that all the registry certificate files (usually found 
     under /etc/docker/certs.d/<registry-name> directory) have permissions of
     444 or are set more restrictively.
   Rationale:
     The /etc/docker/certs.d/<registry-name> directory contains Docker 
     registry certificates. These certificate files must have permissions of 
     444 or more restrictive permissions in order to ensure that unprivileged
     users do not have full access to them.

3. error 4.1
   Description:
     Containers should run as a non-root user.
   Rationale:
     It is good practice to run the container as a non-root user, where 
     possible. This can be done either via the USER directive in the 
     Dockerfile or through gosu or similar where used as part of the CMD or
     ENTRYPOINT directives.

4. error 5.12
   Description:
     The container's root filesystem should be treated as a 'golden image' 
     by using Docker run's --read-only option. This prevents any writes to 
     the container's root filesystem at container runtime and enforces the 
     principle of immutable infrastructure.
   Rationale:
     Enabling this option forces containers at runtime to explicitly define
     their data writing strategy to persist or not persist their data. This 
     also reduces security attack vectors since the container instance's 
     filesystem cannot be tampered with or written to unless it has explicit 
     read-write permissions on its filesystem folder and directories.

5. error 5.25
   Description:
     You should restrict the container from acquiring additional privileges 
     via suid or sgid bits.
   Rationale:
     A process can set the no_new_priv bit in the kernel and this persists 
     across forks, clones and execve. The no_new_priv bit ensures that the
     process and its child processes do not gain any additional privileges 
     via suid or sgid bits. This reduces the danger associated with many 
     operations because the possibility of subverting privileged binaries is
     lessened.
